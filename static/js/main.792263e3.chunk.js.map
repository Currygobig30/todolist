{"version":3,"sources":["components/TodoItem.jsx","components/Todos.jsx","components/layout/Header.jsx","components/AddTodo.jsx","App.jsx","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","marginRight","color","border","borderRadius","cursor","float","onClick","deleteTodo","Component","Todos","todos","map","key","headerStyle","textAlign","Header","AddTodo","state","handleInput","e","setState","target","name","value","handleSubmit","preventDefault","addTodo","display","justifyContent","alignItems","onSubmit","placeholder","width","margin","className","App","uuid","filter","newTodo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.792263e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n// import PropTypes from 'prop-types';\r\n\r\nclass TodoItem extends Component {\r\n\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none' // if true, cross out the item\r\n        }\r\n    }\r\n\r\n    // since all the info we need is in App.jsx, we need to climb the ladder, which is why we don't define markComplete() here. Instead, we raise the event.\r\n\r\n    render() {\r\n\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)} style={{marginRight: '10px'}} />\r\n                    {title}\r\n                    <button style={{background:'#ff0000', color:'#fff', border:'none', borderRadius:'30%', padding:'5px 10px', cursor:'pointer', float:'right'}} onClick={this.props.deleteTodo.bind(this, id)}>X</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    // TodoItem.propTypes = {\r\n    //   todo: PropTypes.object.isRequired\r\n    // }\r\n\r\n\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\n// import PropTypes from 'prop-types';\r\n\r\nclass Todos extends Component {\r\n\r\n  render() {\r\n    const { todos, markComplete, deleteTodo } = this.props;\r\n    return todos.map(todo => <TodoItem key={todo.id} todo={todo} markComplete={markComplete} deleteTodo={deleteTodo}/>)\r\n  }\r\n\r\n  // Todos.PropTypes = {\r\n  //   todos: PropTypes.array.isRequired\r\n  // }\r\n\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n};\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\n\r\nclass AddTodo extends Component {\r\n\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    handleInput = (e) => {\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title: ''})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{display: 'flex', justifyContent:'center', alignItems: 'center'}} onSubmit={this.handleSubmit}>\r\n                <input type=\"text\" name=\"title\" placeholder=\"Add Todo...\" value={this.state.title} onChange={this.handleInput} style={{width:'50%', padding:'5px', margin:'20px 5px'}} />\r\n                <input className=\"btn\" type=\"submit\" value=\"Submit\" style={{width:'5%'}}/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo;","import React, { Component } from 'react';\nimport './App.css';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header'\nimport AddTodo from './components/AddTodo';\nimport {v4 as uuid} from 'uuid';\n\nclass App extends Component {\n\n  state = {\n    todos: [\n      {\n        id: uuid(),\n        title: 'Take out the trash',\n        completed: false\n      },\n      {\n        id: uuid(),\n        title: 'Wash the dishes',\n        completed: false\n      },\n      {\n        id: uuid(),\n        title: 'Feed the dog',\n        completed: false\n      },\n      {\n        id: uuid(),\n        title: 'Pick up Jessie from Airport',\n        completed: false\n      },\n      {\n        id: uuid(),\n        title: 'Video chat with boss',\n        completed: false\n      }\n    ]\n  }\n\n  markComplete = (id) => {\n    this.setState({ todos: this.state.todos.map(todo => {\n      if (todo.id === id) {\n        todo.completed = !todo.completed\n      }\n      return todo;\n    })})\n  }\n\n  deleteTodo = (id) => {\n    // spread operator \"...\"\n    this.setState({todos: [...this.state.todos.filter(todo => todo.id !== id)]})\n  }\n\n  addTodo = (title) => {\n    const newTodo = {\n      id: uuid(),\n      title: title,\n      completed: false\n    };\n    this.setState({todos: [...this.state.todos, newTodo]})\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <Header />\n          <Todos todos={this.state.todos} markComplete={this.markComplete} deleteTodo={this.deleteTodo}/>\n          <AddTodo addTodo={this.addTodo} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}